#!/usr/bin/env sh

# Exit the script immediately on error.
set -eu

readonly DOTFILES_GIT_DIR="${HOME}/.dotfiles.git"

main() {
  # Set up the dotfiles repo as a bare git repo managed in ~/.dotfiles.git.
  cd "${HOME}"
  git clone --bare git@github.com:Umofomia/dotfiles.git "${DOTFILES_GIT_DIR}"

  # Don't show untracked files in the `git status` output.
  dotfiles config --local status.showUntrackedFiles no

  # Configure fetching remote refs, since `git clone --bare` skips this.
  dotfiles config --local remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'

  # Fetch all remote refs and configure the master branch to track its remote.
  dotfiles fetch origin
  dotfiles branch --set-upstream-to=origin/master master

  # Because `git clone --bare` does not check out the working tree and create
  # the index, the staging area at this point will appear to indicate that all
  # files tracked by the repo are staged for removal. To address this, reset
  # the index and update the working tree by populating the files from the
  # repo. By default, `git reset` will not overwrite pre-existing files in the
  # working tree. This is better than using `git checkout`, which fails when
  # there are any pre-existing files that also exist in the repo.
  dotfiles reset HEAD

  # Any pre-existing files that differ from those in the repo will now appear
  # to be unstaged modifications. Stash them so that their contents can later
  # be restored if desired.
  if ! dotfiles diff-index --quiet HEAD --; then
    dotfiles stash push -m "Backup of pre-existing dotfiles"
  
    #####
print_notification <<NOTIFICATION

The following pre-existing files were stashed:
$(dotfiles stash show --name-only | sed 's/^/\t/')
Use \`dotfiles stash\` to work with these stashed files.
NOTIFICATION
    #####
  fi
}

finish() {
  exit_code=$?
  if [ "${exit_code}" -eq 0 ]; then
    #####
print_success <<SUCCESS

Dotfiles setup complete!
You may need to start a new terminal for some settings to take effect.
SUCCESS
    #####
  else
    #####
print_error <<ERROR

Dotfiles setup failed with error: ${exit_code}
ERROR
    #####
  fi
}
trap finish EXIT

#
# Facilitates interfacing with the dotfiles repo.
#

dotfiles() {
  git --git-dir="${DOTFILES_GIT_DIR}" --work-tree="${HOME}" "$@"
}

#
# Functions for providing colored output.
#

print_success() {
  print_with_sgr "$(tput setaf 2)"  # Green foreground
}

print_notification() {
  print_with_sgr "$(tput setaf 3)"  # Yellow foreground
}

print_error() {
  >&2 print_with_sgr "$(tput setaf 1)"  # Red foreground
}

print_with_sgr() {
  printf "%b" "$1"
  while IFS= read -r output; do
    printf "%s\n" "${output}"
  done
  printf "%b" "$(tput sgr0)"  # Reset attributes
}

# Invoke the script
main
